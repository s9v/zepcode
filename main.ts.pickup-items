// Pickup Items

import { time } from "console";
import "zep-script";
import { ScriptPlayer } from "zep-script";

namespace utils {
  export function log(s) {
    ScriptApp.sayToAll(s);
  }

  export function runLaterSeries(...pairs) {
    ScriptApp.sayToAll(`${pairs}`);
    let [last_time, last_cb] = pairs[pairs.length-1];
    let total_cb = function() {
      ScriptApp.runLater(last_cb, last_time);
    };

    for (let i = pairs.length - 2; i >= 0; i--) {
      let [time, cb] = pairs[i];
      let temp_cb = function() {
        ScriptApp.runLater(function() {
          cb();
          total_cb();
        }, time);
      };
      total_cb = temp_cb;
    }

    total_cb();
  }
}

class PlayerState {
  id;
  picked_object;

  constructor(id) {
    this.id = id;
    this.picked_object = null;
  }
}

class PlayerStateCollection {
  player_states;

  constructor() {
    this.player_states = {};
  }

  get(id) {
    if (!this.player_states.hasOwnProperty(id)) {
      this.player_states[id] = new PlayerState(id);
    }
    
    return this.player_states[id];
  }

  has(id) {
    return this.player_states.hasOwnProperty(id);
  }
}

class HouseItemsCollection {
  coords;

  constructor() {
    this.coords = {};
  }

  _key(x, y) {
    return `${x},${y}`;
  }

  has(x, y) {
    return this.coords.hasOwnProperty(this._key(x, y));
  }

  put(x, y, sprite) {
    utils.log(`put house item ${x} ${y} ${sprite}`);
    ScriptMap.putObject(x, y, sprite, { overlap: true });
    this.coords[this._key(x, y)] = sprite;
  }

  remove(x, y) {
    let old_obj = this.coords[this._key(x, y)] || null;

    utils.log(`remove house item ${x} ${y} ${old_obj}`);

    ScriptMap.putObject(x, y, null);
    this.coords[this._key(x, y)] = null;

    return old_obj;
  }
}

// load sprite
let redman = ScriptApp.loadSpritesheet('redman.png', 48, 64, {
  left: [5, 6, 7, 8, 9],       // defined base anim 
  up: [15, 16, 17, 18, 19],    // defined base anim 
  down: [0, 1, 2, 3, 4],       // defined base anim 
  right: [10, 11, 12, 13, 14], // defined base anim 
}, 16);

// load sprite
let blueman = ScriptApp.loadSpritesheet('blueman.png', 48, 64, {
  left: [5, 6, 7, 8, 9],
  up: [15, 16, 17, 18, 19],
  down: [0, 1, 2, 3, 4],
  right: [10, 11, 12, 13, 14],
}, 16);

//left: [34, 2, 27, 28, 27, 28],
let blueman_pickup02 = ScriptApp.loadSpritesheet('blueman/tile002.png');
let blueman_pickup34 = ScriptApp.loadSpritesheet('blueman/tile034.png');
let oldman_pickup04 = ScriptApp.loadSpritesheet('oldman_pickup/tile004.png');
let oldman_pickup05 = ScriptApp.loadSpritesheet('oldman_pickup/tile005.png');

let house_items = new HouseItemsCollection();
let blueman_static = ScriptApp.loadSpritesheet("blueman_static.png");
let player_states = new PlayerStateCollection();

// App
ScriptApp.onStart.Add(onStart);
ScriptApp.onUpdate.Add(onUpdate);
ScriptApp.onDestroy.Add(onDestroy);
// Player
ScriptApp.onJoinPlayer.Add(onJoinPlayer);
// OnKeyDown
ScriptApp.addOnKeyDown(70, key_F);
ScriptApp.addOnKeyDown(81, key_Q);
ScriptApp.addOnKeyDown(69, key_E);
ScriptApp.addOnKeyDown(84, key_T);
ScriptApp.addOnKeyDown(82, key_R);



// === App lifecycle ===

function onStart() {
  for (const x of [...Array(200).keys()]) {
    for (const y of [...Array(200).keys()]) {
      ScriptApp.addOnTileTouched(x, y, function (player) {
        onTileTouched(x, y, player);
      });
   }
  }

  // debug
  ScriptMap.putObject(30, 57, blueman_static, { overlap: true });
  ScriptMap.moveObject(30, 57, 40, 67, 0);
}

function onUpdate() {
  for (let id in ScriptApp.players) {
    let player = ScriptApp.players[id];

    let anim = player.tag.pickup_anim || null;

    if (anim != null) {
      utils.log(`player [${player.name}] - anim ${anim}`);

      if (anim == 1) {
        player.sprite = redman;
        player.sendUpdated();
      }

      if (anim > 0) {
        player.tag.pickup_anim--;
        player.save();
      }
    }
  }
}

function onDestroy() {
  ScriptMap.clearAllObjects();
}

// === Player lifecycle ===

function onJoinPlayer(player) {
  player.tag = {}
  player.save();
  player.showCenterLabel(`player ${player.name} joined. Gazzzaaa!`);
}

function onTileTouched(x, y, player) {
}

// === Keys ===

function key_F(player) {
  let [x, y] = [player.tileX, player.tileY];
  
  // player.tag.pickup_anim = 100;
  player.sprite = oldman_pickup04;
  player.sendUpdated();
  player.save();

  utils.runLaterSeries(
    [
      2,
      () => { ScriptApp.sayToAll('F1'); }
    ],
    [
      2,
      () => { ScriptApp.sayToAll('F2'); }
    ],
    [
      2,
      () => { ScriptApp.sayToAll('F3'); }
    ],
  );

  // ScriptApp.runLater(
  //   ScriptApp.runLater(function() {
  //     player.sprite = redman;
  //     player.sendUpdated();
  //   }, 0.2);
  // }, 0.2);
  
  let pstate = player_states.get(player.id);

  if (pstate.picked_object == null) {
    if (!house_items.has(x, y)) {
      utils.log(`nothing to pick up ${x} ${y}`);
      return;
    }

    let sprite = house_items.remove(x, y);

    utils.log(`picking up ${x} ${y} Sprite: ` + JSON.stringify(Object.keys(sprite)));

    pstate.picked_object = [x, y, sprite];
  } else {
    let [_x, _y, sprite] = pstate.picked_object;
    utils.log(`putting down ${x} ${y} Sprite: ` + JSON.stringify(Object.keys(sprite)));
    house_items.put(x, y, sprite);
    pstate.picked_object = null;
  }
}

function key_T(player) {
  house_items.put(player.tileX, player.tileY, blueman_static);
  utils.log(`put object (blueman_static) ${player.tileX}, ${player.tileY}`);
}

function key_R(player) {
}

function key_Q(player) {}
function key_E(player) {}

ScriptApp.onJoinPlayer.Add(function(player){
  // ScriptMap.moveObject(40, 67, 40, 67, 0);
  player.sprite = redman;
  utils.log('redman set!');
  player.sendUpdated();
});

// ScriptApp.onUpdate.Add(function (dt) {
//   for (let id in ScriptApp.players) {
//     if (!(id in picked_object_coord))
//       return;

//     let player = ScriptApp.players[id];
//     let [object_x, object_y] = picked_object_coord[id];
//     ScriptMap.moveObject(object_x, object_y, player.tileX, player.tileY, 1);
//     utils.log(`${object_x}, ${object_y}, ${player.tileX}, ${player.tileY}`);
//   }
// });